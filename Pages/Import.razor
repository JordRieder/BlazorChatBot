@page "/import"
@using BlazorChatBot.Services
@using Microsoft.AspNetCore.Components.Forms
@inject RagDatabaseService RagService

<h2 class="hogwarts-title">📚 Import Magical Documents</h2>
<h3 style="text-align: center; color: black;">
    <em>Add knowledge to Quill's enchanted library.</em>
</h3>

<div class="import-section" style="margin-bottom: 20px; text-align: center;">
    <div class="import-controls">
        <InputFile OnChange="HandleFileSelection" multiple accept=".txt" />

        @if (!string.IsNullOrEmpty(importStatus))
        {
            <div class="import-status @(importSuccess ? "success" : "error")" style="margin-top: 10px;">
                @importStatus
            </div>
        }

        @if (documentCount > 0)
        {
            <div class="document-info" style="margin-top: 10px; color: #666;">
                📚 Documents in knowledge base: @documentCount
            </div>
        }
    </div>
</div>

@code {
    private bool isImporting = false;
    private string importStatus = string.Empty;
    private bool importSuccess = false;
    private int documentCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentCount();
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0) return;

        isImporting = true;
        importStatus = "📚 Processing files...";
        StateHasChanged();

        try
        {
            var importedCount = 0;
            var skippedCount = 0;
            var errorCount = 0;

            foreach (var file in e.GetMultipleFiles(10))
            {
                try
                {
                    if (!file.Name.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                        continue;

                    using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
                    using var reader = new StreamReader(stream);
                    var content = await reader.ReadToEndAsync();

                    if (string.IsNullOrWhiteSpace(content) || await RagService.DocumentExistsAsync(content))
                    {
                        skippedCount++;
                        continue;
                    }

                    await RagService.InsertDocumentWithVectorAsync(content);
                    importedCount++;
                    importStatus = $"📚 Imported {importedCount} documents...";
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    errorCount++;
                    Console.WriteLine($"Error importing file {file.Name}: {ex.Message}");
                }
            }

            var statusParts = new List<string>
    ();
            if (importedCount > 0)
                statusParts.Add($"✅ {importedCount} document{(importedCount == 1 ? "" : "s")} imported");
            if (skippedCount > 0)
                statusParts.Add($"⏭️ {skippedCount} skipped (duplicates or empty)");
            if (errorCount > 0)
                statusParts.Add($"❌ {errorCount} failed");

            importStatus = statusParts.Any() ? string.Join(" | ", statusParts) : "No files processed";
            importSuccess = importedCount > 0;

            await LoadDocumentCount();
        }
        catch (Exception ex)
        {
            importStatus = $"❌ Import failed: {ex.Message}";
            importSuccess = false;
        }
        finally
        {
            isImporting = false;
            StateHasChanged();

            // Clear status after a few seconds
            _ = Task.Run(async () =>
            {
                await Task.Delay(5000);
                importStatus = string.Empty;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task LoadDocumentCount()
    {
        try
        {
            documentCount = await RagService.GetDocumentCountAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading document count: {ex.Message}");
            documentCount = 0;
        }
    }
}
