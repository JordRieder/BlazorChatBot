@page "/"
@using System.Text
@using System.Text.RegularExpressions
@using BlazorChatBot.Services
@using Microsoft.AspNetCore.Components.Web
@inject IChatBotService ChatBotService
@inject IJSRuntime JSRuntime

<h2 class="hogwarts-title">🪄 Speak with Quill</h2>
<h3 style="text-align: center; color: black;">
    <em>Your Hogwarts AI companion, a data-driven LLM.</em>
</h3>

<div class="chat-container">
    <div class="chat-box" @ref="chatBoxRef">
        @foreach (var message in messages)
        {
            <div class="@($"message {(message.IsUser ? "student" : "quill")}")">
                <div class="message-content">
                    @((MarkupString)RenderMessage(message.Text))
                </div>
            </div>
        }
    </div>
    <div class="input-area">
        <input class="hogwarts-input" @bind="userInput" @bind:event="oninput" @onkeypress="HandleKeyPress" placeholder="Ask about professors, classes, or magical events..." />
        <button class="hogwarts-button" @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    private string userInput = string.Empty;
    private List<ChatMessage> messages = new();
    private ElementReference chatBoxRef;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput)) return;

        // Add user message
        messages.Add(new ChatMessage { Text = userInput, IsUser = true });

        // Add scribbling placeholder
        var assistantMessage = new ChatMessage { Text = "<em>✨ Quill is scribbling furiously...</em>", IsUser = false };
        messages.Add(assistantMessage);
        StateHasChanged();
        await ScrollToBottom();

        // Build context
        var context = string.Join("\n", messages
            .Where(m => m.IsUser || !m.Text.Contains("scribbling"))
            .TakeLast(5)
            .Select(m => $"{(m.IsUser ? "User" : "Quill")}: {StripHtml(m.Text)}"));

        var responseBuilder = new StringBuilder();
        var streamStarted = false;

        await foreach (var token in ChatBotService.StreamResponseAsync(userInput, context))
        {
            if (!streamStarted)
            {
                // Replace scribbling message with empty assistant message
                assistantMessage.Text = string.Empty;
                streamStarted = true;
            }

            responseBuilder.Append(token);
            assistantMessage.Text = responseBuilder.ToString();
            StateHasChanged();
            await ScrollToBottom();
        }

        userInput = string.Empty;
        StateHasChanged();
    }


    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", chatBoxRef);
    }

    private static string StripHtml(string input)
    {
        return Regex.Replace(input, "<.*?>", string.Empty);
    }

    private string RenderMessage(string text)
    {
        var html = Markdig.Markdown.ToHtml(text);
        return html.Trim();
    }

    public class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }
}
